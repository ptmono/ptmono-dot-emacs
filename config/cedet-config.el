;; Load CEDET.
;; See cedet/common/cedet.info for configuration details.
;; IMPORTANT: For Emacs >= 23.2, you must place this *before* any
;; CEDET component (including EIEIO) gets activated by another 
;; package (Gnus, auth-source, ...).

;; (if (d-windowp)
;;     (load-file "~/.emacs.d/etc/cedet-1.1/common/cedet.el")
(if (d-windowp)
    ;; (progn
    ;;   (load-file "~/.emacs.d/cvs/cedet/cedet-devel-load.el")
    ;;   (load-file "~/.emacs.d/cvs/cedet/contrib/cedet-contrib-load.el"))

    ;(load-file "~/.emacs.d/cvs/cedet/common/cedet.el")
    ;(load-file "~/.emacs.d/etc/cedet-1.1/common/cedet.el")
    ()
  
  (load-file "~/.emacs.d/cvs/cedet/cedet-devel-load.el")
  (load-file "~/.emacs.d/cvs/cedet/contrib/cedet-contrib-load.el"))
  ;(load-file "~/.emacs.d/cvs/cedet/lisp/cedet/cedet.el"))

;; Enable EDE (Project Management) features
;(global-ede-mode 1)

;; Enable EDE for a pre-existing C++ project
;; (ede-cpp-root-project "NAME" :file "~/myproject/Makefile")


;; Enabling Semantic (code-parsing, smart completion) features
;; Select one of the following:


;; * This enables the database and idle reparse engines
;;(semantic-load-enable-minimum-features)

;; * This enables some tools useful for coding, such as summary mode
;;   imenu support, and the semantic navigator
;;(semantic-load-enable-code-helpers)

;; * This enables even more coding tools such as intellisense mode
;;   decoration mode, and stickyfunc mode (plus regular code helpers)
;; (semantic-load-enable-gaudy-code-helpers)

;; * This enables the use of Exuberent ctags if you have it installed.
;;   If you use C++ templates or boost, you should NOT enable it.
;; (semantic-load-enable-all-exuberent-ctags-support)
;;   Or, use one of these two types of support.
;;   Add support for new languges only via ctags.
;; (semantic-load-enable-primary-exuberent-ctags-support)
;;   Add support for using ctags as a backup parser.
;; (semantic-load-enable-secondary-exuberent-ctags-support)

;; Enable SRecode (Template management) minor-mode.
;; (global-srecode-minor-mode 1)


(if (d-windowp)
    (require 'semantic))

(global-ede-mode -1)		;do Not use project manage

(if (d-not-windowp)
    (semantic-load-enable-minimum-features)) ;This is not work for 1.4Beta
;(semantic-load-enable-code-helpers)
;(semantic-load-enable-gaudy-code-helpers)
;(semantic-load-enable-excessive-code-helpers)
;(semantic-load-enable-semantic-debugging-helpers)
;; Or specify
;; (setq semantic-default-submodes '(global-semanticdb-minor-mode
;; 				global-semantic-idle-scheduler-mode
;; 				global-semantic-idle-summary-mode
;; 				global-semantic-idle-completions-mode
;; 				global-semantic-decoration-mode
;; 				global-semantic-highlight-func-mode
;; 				;;global-semantic-stickyfunc-mode
;; 				global-semantic-mru-bookmark-mode))



;; To use additional features for names completion, and displaying of
;; information for tags & classes.
;(require 'semantic-ia)

;; If you use GCC for programming in C & C++, then Semantic can
;; automatically find path, where system include files are located. To do
;; this

;; Not work for current 
(if (d-windowp)
    (semantic-gcc-setup))
    ;(require 'semantic-gcc))			;obsolete on 1.4Beta

;; You can also explicitly specify additional paths for look up of include
;; files
;(semantic-add-system-include "/usr/include" 'c++-mode)
(semantic-add-system-include "/usr/include/Qt" 'c++-mode)


;;; To optimize work with tags
;;  - limit search by declaring an EDE project, as this described below
;;  - explicitly specify a list of root directories for your
;;    projects, so Semantic will use limited number of databases
;;    with syntactic information
;;  - explicitly generate tags databases for often used
;;    directories (/usr/include, /usr/local/include, etc) with the
;;    semanticdb-create-ebrowse-database or
;;    semantic-create-cscope-database commands
;;  - limit search by customization of the
;;    semanticdb-find-default-throttle variable for concreate modes
;;    - for example, don't use information from system include
;;    files, by removing system symbol from list of objects to
;;    search for c-mode
;(setq-mode-local c-mode semanticdb-find-default-throttle
;		 '(project unloaded system recursive))


;;; Customization of Semanticdb
;; If you use standard procedure for loading of Cedet, then Semanticdb
;; will loaded automatically. Otherwise, you can load and enable it with
;; following commands

;; (if (d-windowp)
;;     (require 'semanticdb))		;obsolete on 1.4Beta
(global-semanticdb-minor-mode 1)

;; Semanticdb can use databases generated by external utilities; gtags
;; from GNU Global, ctags, ebrowse&cscope

;; To enable support for gnu global
;(require 'semanticdb-global)
(semanticdb-enable-gnu-global-databases 'c-mode)
(semanticdb-enable-gnu-global-databases 'c++-mode)
(semanticdb-enable-gnu-global-databases 'java-mode)

;; To enable ctags for some languages
;; Unix Shell, Perl, Pascal, Tcl, Fortran, Asm
;; (semantic-load-enable-primary-exuberent-ctags-support)


;;; How to customize Semantic to work with C & C++ projects
;; To proper work of Semantic with C&C++ code is recommended to use the
;; EDE package. For these languages, EDE package defines special project
;; type; ede-cpp-root-project, that provides additional information to
;; Semantic, that will be used to analyze source code of your project
;; (ede-cpp-root-project "Test"
;; 		      :name "Test Project"
;; 		      ;; This file(:file) isn't parsed, but it's used only
;; 		      ;; as an anchor to search a files in projects. It is
;; 		      ;; root directory.
;; 		      :file "~/work/project/CMakeLists.txt"
;; 		      ;; relative to project's root directory
;; 		      :include-path '("/"
;; 				      "/Common"
;; 				      "/Interfaces"
;; 				      "/Libs"
;; 				      )
;; 		      :system-include-path '("~/exp/inlcude")
;; 		      :spp-table '(("isUnix" . "")
;; 				   ("BOOST_TEST_DYN_LINK" . ""))
;;		      )

;; For qt
;; (setq qt4-base-dir "/usr/include/Qt")
;; (semantic-add-system-include qt4-base-dir 'c++-mode)
;; (add-to-list 'auto-mode-alist (cons qt4-base-dir 'c++-mode))
;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qconfig.h"))
;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qconfig-dist.h"))
;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qglobal.h"))

;; (defun my-cedet-hook ()
;;   (local-set-key [(control return)] 'semantic-ia-complete-symbol)
;;   (local-set-key "\C-c?" 'semantic-ia-complete-symbol-menu)
;;   (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
;;   (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle))
;; (add-hook 'c-mode-common-hook 'my-cedet-hook)


;; (defun my-c-mode-cedet-hook ()
;;  (local-set-key "." 'semantic-complete-self-insert)
;;  (local-set-key ">" 'semantic-complete-self-insert))
;; (add-hook 'c-mode-common-hook 'my-c-mode-cedet-hook)

;;(semantic-mode 1)

;; (require 'eieio-opt)
;; (defun my-cedet-hook ()
;;   (local-set-key [(control return)] 'semantic-ia-complete-symbol)
;;   (local-set-key "\C-c?" 'semantic-ia-complete-symbol-menu)
;;   (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
;;   (local-set-key "\C-c=" 'semantic-decoration-include-visit)
;;   (local-set-key "\C-cj" 'semantic-ia-fast-jump)
;;   (local-set-key "\C-cq" 'semantic-ia-show-doc)
;;   (local-set-key "\C-cs" 'semantic-ia-show-summary)
;;   (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle)
;;   (local-set-key "\C-c+" 'semantic-tag-folding-show-block)
;;   (local-set-key "\C-c-" 'semantic-tag-folding-fold-block)
;;   (local-set-key "\C-c\C-c+" 'semantic-tag-folding-show-all)
;;   (local-set-key "\C-c\C-c-" 'semantic-tag-folding-fold-all)
;;   )
;; (add-hook 'c-mode-common-hook 'my-cedet-hook)

(if (d-not-windowp)
    (global-semantic-tag-folding-mode -1))	;My default folding is outline-mode
